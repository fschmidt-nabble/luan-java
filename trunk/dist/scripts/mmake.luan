import "Table"
import "Io"
import "String"
import "Java"
import "java.util.Date"

compiler = Table.concat( { "javac -g -encoding UTF8", ... }, " " )

function mmake(dir)
	local java = {}
	local dirs = {}
	for _, file in ipairs(dir.children()) do
		local name = file.name()
		if name.match ".java$" ~= nil then
			java[#java+1] = name.sub(1,-6)
		end
		if file.is_directory() and mmake(file) then
			dirs[#dirs+1] = name
		end
	end
	if #java == 0 and #dirs == 0 then
		return false;
	end
	local out = dir.child("Makefile").text_writer()
	out.write( header() )
	for _, s in ipairs(java) do
		out.write( "\\\n\t\t",  s , ".class" )
	end
	for _, s in ipairs(dirs) do
		out.write( "\n\tcd ", s, ";  make all" )
	end
	out.write "\n\nclean:\n\trm -f *.class\n"
	for _, s in ipairs(dirs) do
		out.write( "\tcd ", s, ";  make clean\n" )
	end
	out.close()
	print(dir.to_string())
	return true
end


function header()
	return 	%>
# Makefile created on <%=Date.new()%> by Mmake

.SUFFIXES: .java .class

.java.class:
	javac -g -encoding UTF8 $<

all: <%
end

mmake(Io.File ".")
