function Package.global_import(name)
	local mod = require(name)
	_G[name] = mod
	return mod
end

local Basic = Package.global_import("Basic","luan.lib.BasicLib.LOADER")
local String = Package.global_import("String","luan.lib.StringLib.LOADER")

-- improved global_import
function Package.global_import(name)
	local short = name.match("\.([^.]+)$") or name
	local mod = require(name)
	_G[short] = mod
	return mod
end

local Table = Package.global_import("Table","luan.lib.TableLib.LOADER")
local Io = Package.global_import("Io","luan.lib.IoLib.LOADER")
Package.global_import("Math","luan.lib.MathLib.LOADER")
Package.global_import("Html","luan.lib.HtmlLib.LOADER")
Package.global_import("Thread","luan.lib.ThreadLib.LOADER")
Package.global_import("Binary","luan.lib.BinaryLib.LOADER")
Package.global_import("Os","luan.lib.OsLib.LOADER")


function Io.print_to(out,...)
	local list = {}
	for _,v in Basic.values(...) do
		list[#list+1] = _G.to_string(v)
		list[#list+1] = '\t'
	end
	if #list == 0 then
		out.write( '\n' )
	else
		list[#list] = '\n'
		out.write( Table.unpack(list) )
	end
end

function _G.print(...)
	Io.print_to(Io.stdout,...)
end

local Debug = {}
Package.loaded.Debug = Debug
_G.Debug = Debug

function Debug.print_if_something(...)
	if Table.pack(...).n > 0 then
		_G.print(...)
	end
end

function Debug.debug(prompt)
	prompt = prompt or "luan_debug> "
	local function console()
		return Io.read_console_line(prompt)
	end
	local env = {}
	for line in console do
		try
			local fn = _G.load(line,"stdin",env,true)
			Debug.print_if_something( fn() )
		catch e do
			_G.print(e)
		end
	end
end


-- import modules
_G.Reactionary = require "Reactionary"
